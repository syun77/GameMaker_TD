<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 初期化
// Wave数
nWave = 1;
// 所持金
money = 30;
// 状態
state = STATE_WAIT;
// 汎用タイマー
timer = 2 * 60;

// 敵生成のインターバル
spawnInterval = 60;
// 敵生成のインターバルタイマー
spawnIntervalTimer = 0;
// Wave内で敵を生成する数
spawnNumber = 6;

// カーソル座標(X)
xcursor = 0;
// カーソル座標(Y)
ycursor = 0;
// カーソル位置にあるオブジェクト
cursorObj = noone;

// 操作モード
gameMgr_changeSelMode(SELMODE_NONE);
// アップグレード対象の砲台
target = noone;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>711</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_life</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 更新
/// 更新
// カーソル更新
gameMgr_updateCursor();

// 購入ボタンの更新
gameMgr_updateBtnBuy();

// アップグレードボタンの更新
gameMgr_updateBtnUpgrade();

// 状態による分岐
switch(state)
{
case STATE_WAIT:
  // ■開始の待ち時間
  timer--;
  if(timer &lt; 1)
  {
    // ▼メインゲーム開始
    // 敵出現数を設定
    spawnNumber = enemy_getSpawnNumber(nWave);
    // 敵生成のインターバル
    spawnInterval = enemy_getSpawnInterval(nWave);
    spawnIntervalTimer = 0;
    
    // Wave開始演出
    with(instance_create(-80, 0, obj_wave))
    {
      // Wave数を設定する
      nWave = other.nWave;
    }
    
    state = STATE_MAIN;
  }
  break;
  
case STATE_MAIN:
  // ■メイン処理を呼び出し
  gameMgr_stepMain();
  break;
  
case STATE_GAMEOVER:
  // ■ゲームオーバー
  if(mouse_check_button_pressed(mb_left))
  {
    // 最初からやり直す
    room_goto(rm_main);
  }
  break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUIの描画
draw_set_colour(c_white);
var px = 640 + 8;
// Wave数の描画
draw_text(px, 8, "WAVE: " + string(nWave));
// 所持金の描画
draw_text(px, 24, "MONEY: $" + string(money_get()));

// アップグレードモードの描画
if(selmode == SELMODE_UPGRADE)
{
  with(target)
  {
    // 砲台のレベル表示
    var py = 136;
    draw_text(px, py, "[Infantry Info]");
    draw_text(px, py+16, "RANGE: "+ string(lvRange));
    draw_text(px, py+32, "DAMAGE: " + string(lvDamage));
    draw_text(px, py+48, "FIRERATE: " + string(lvFirerate));
  }
}

// ゲームオーバーの描画
if(state == STATE_GAMEOVER)
{
  // 中央揃え
  draw_set_halign(fa_center);
  draw_set_valign(fa_middle);
  
  var text = "GAME OVER";
  var sc = 3; // 拡大サイズ
  // 影をつける
  var px = 320;
  var py = 240;
  draw_set_colour(c_black);
  draw_text_transformed(px+2, py+2, text, sc, sc, 0);
  draw_set_colour(c_white);
  draw_text_transformed(px, py, text, sc, sc, 0);
  
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>714</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_life_images</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>648</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>40</string>
          </argument>
          <argument>
            <kind>5</kind>
            <sprite>spr_heart</sprite>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 射程範囲の描画
if(selmode == SELMODE_UPGRADE)
{
  draw_set_colour(c_white);
  draw_set_alpha(0.3);
  var px = target.x;
  var py = target.y;
  var radius = infantry_getParam(UPGRADE_RANGE, target.lvRange);
  draw_circle(px, py, radius*2, false);
  draw_set_alpha(1);
  draw_circle(px, py, radius*2, true);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// カーソルの描画
// 矩形カーソルの描画
if(xcursor &gt; 640)
{
  // UI領域外なので描画不要
  exit;
}
draw_set_colour(c_red);
var x1 = xcursor - GRID_SIZE/2;
var y1 = ycursor - GRID_SIZE/2;
var x2 = x1 + GRID_SIZE;
var y2 = y1 + GRID_SIZE;
draw_rectangle(x1, y1, x2, y2, true);

// 購入モードでなければ配置する砲台を描画しない
if(selmode != SELMODE_BUY)
{
  exit;
}

// 砲台を薄く描画する
if(cursorObj != noone)
{
  if(cursorObj.object_index == obj_off)
  {
    // 配置できない場所なので配置不可の描画
    draw_sprite(spr_off, 0, x1, y1);
  }
  exit;
}
draw_set_alpha(0.3);
draw_sprite(spr_infantry, 0, xcursor, ycursor);
draw_set_alpha(1);

// 射程範囲を描画
draw_set_colour(c_white);
var radius = infantry_getParam(UPGRADE_RANGE, 1);
draw_circle(xcursor, ycursor, radius*2, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
