<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 初期化
// 状態 (0:通常 1:マウスが上に乗っている 2:クリック中)
state = 0;

// 有効無効フラグ
bEnabled = true;

// 幅
width = 128;

// 高さ
height = 32;

// ラベル
label = "Text";

// ラベルの色
cLabel = c_black;

// ボタンの色
color = c_ltgray;

// ボタンの枠の色
cFrame = c_black;

// ラベルのフォント (nooneの場合は現在設定しているフォントを使用する)
font = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ボタンの状態を更新
if(visible == false)
{
  // 非表示のときは更新しない
  exit;
}

var px = mouse_x;
var py = mouse_y;
if(bEnabled and point_in_rectangle(px, py, x, y, x+width, y+height))
{
  // マウスがボタンの上に乗っている
  if(mouse_check_button(mb_left))
  {
    if(mouse_check_button_pressed(mb_left))
    {
      // クリックした
      event_perform(ev_other, ev_user0);
    }
    // クリック中
    state = 2;
  }
  else
  {
    if(state == 2)
    {
      // 決定した
      event_perform(ev_other, ev_user1);
    }
    state = 1;
  }
}
else
{
  // 通常
  state = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 離した
//show_debug_message("decide");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 押した
//show_debug_message("click");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 描画
// 元の色を保持
var cprevious = draw_get_colour();

// 背景描画
var c = color;
var ofsY = 0;
switch(state)
{
case 0: // 通常
  break;
case 1: // マウスが上に乗っている
  // 少し明るくする
  c = merge_colour(c, c_white, 0.2);
  break;
case 2: // クリック中
  ofsY += 2;
  break;
}
// 描画色設定
draw_set_colour(c);

if(bEnabled)
{
  // ボタンが押せる
  var up = (state != 2);
  draw_button(x, y, x+width, y+height, up);
}
else
{
  // ボタンを押せないので暗くする
  var c2 = merge_colour(c, c_black, 0.5);
  draw_set_colour(c2);
  draw_rectangle(x, y, x+width, y+height, false);
  draw_set_colour(c);
  draw_rectangle(x, y, x+width, y+height, true);
}

// ラベル描画 (中央揃え)
draw_set_colour(cLabel);
var cx = x + width/2;
var cy = y + height/2;
cx -= string_width(label)/2;
cy -= string_height(label)/2;
cy += ofsY; // クリック中は少し下げる

if(font != noone)
{
  // フォント設定
  draw_set_font(font);
}
draw_text(cx, cy, label);

// 元の色に戻す
draw_set_colour(cprevious);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
